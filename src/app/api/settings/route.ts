import { NextRequest, NextResponse } from "next/server";
import { z } from "zod";
import { prisma } from "@/lib/prisma-db";
import { DEMO_USER_ID, ensureDemoUser } from "@/lib/demo-user";

// Templates padr√£o
const DEFAULT_SETTINGS = {
  // Prompts de IA
  templatePesquisa: `# PROMPT DE PESQUISA PROFUNDA DE EMPRESA

**EMPRESA ALVO:** {nome_empresa}
**OBJETIVO:** Coletar informa√ß√µes estrat√©gicas para personalizar outreach B2B

## 1. INFORMA√á√ïES B√ÅSICAS
- Nome completo e raz√£o social
- Setor/ind√∫stria espec√≠fica (n√£o apenas "servi√ßos")
- Tamanho aproximado (n¬∫ funcion√°rios, faturamento se p√∫blico)
- Localiza√ß√µes principais (matriz, filiais)
- Website oficial e redes sociais ativas

## 2. CONTEXTO DE NEG√ìCIO
- Principais produtos/servi√ßos oferecidos
- Proposta de valor (como se posicionam no mercado?)
- P√∫blico-alvo/ICP deles
- Principais concorrentes
- Modelo de neg√≥cio (B2B, B2C, Marketplace, SaaS, etc)

## 3. SINAIS DE COMPRA (MUITO IMPORTANTE)
- Not√≠cias recentes (√∫ltimos 6 meses):
  * Expans√£o, nova sede, novos mercados
  * Rodadas de investimento
  * Lan√ßamento de produtos
  * Contrata√ß√µes em massa
  * Premia√ß√µes, certifica√ß√µes
- Tecnologias que usam (vis√≠veis no site/LinkedIn)
- Vagas abertas relacionadas √† nossa solu√ß√£o
- Eventos que participaram/patrocinam

## 4. IDENTIFICA√á√ÉO DE DORES
Com base no setor, tamanho e contexto, INFERIR:
- 2-3 desafios t√≠picos que empresas assim enfrentam
- Processos que provavelmente s√£o manuais/ineficientes
- √Åreas onde nossa solu√ß√£o {informacoes_propria} se encaixa

## 5. TOMADORES DE DECIS√ÉO (se poss√≠vel)
- Cargos t√≠picos que decidem sobre nossa solu√ß√£o
- Nomes no LinkedIn se dispon√≠veis (CEO, CTO, CMO, etc)
- Perfil do decision-maker (background, tempo na empresa)

## FORMATO DA RESPOSTA:
- Markdown estruturado
- Bullet points claros
- Destacar em **negrito** os insights mais relevantes
- Sempre citar fontes quando poss√≠vel
- Se n√£o encontrar informa√ß√£o: escrever "N√£o encontrado" (n√£o inventar)`,
  templateAnaliseEmpresa: `# PROMPT DE AN√ÅLISE ESTRAT√âGICA E PERSONALIZA√á√ÉO

Voc√™ receber√° dados coletados sobre **{nome_empresa}**.

**SUA MISS√ÉO:** Transformar dados em INSIGHTS ACION√ÅVEIS para personalizar outreach.

## ENTRADA (dados da pesquisa anterior):
{company_research}

## SUA AN√ÅLISE DEVE CONTER:

### 1. RESUMO EXECUTIVO (2-3 frases)
- Quem s√£o, o que fazem, tamanho/relev√¢ncia
- Principal caracter√≠stica que se destaca

### 2. DORES IDENTIFICADAS (2-3 mais relevantes)
Com base no setor, tamanho, not√≠cias e contexto, identificar:
- Dor #1: [descri√ß√£o] ‚Üí Como sabemos: [evid√™ncia]
- Dor #2: [descri√ß√£o] ‚Üí Como sabemos: [evid√™ncia]
- Dor #3: [descri√ß√£o] ‚Üí Como sabemos: [evid√™ncia]

**REGRA:** Cada dor deve ter uma EVID√äNCIA concreta (not√≠cia, tecnologia usada, vaga aberta, padr√£o do setor)

### 3. OPORTUNIDADES DE ABORDAGEM (2 principais)
Para cada dor identificada:
- **√Çngulo de entrada:** Como iniciar a conversa?
- **Proposta de valor espec√≠fica:** O que oferecemos que resolve ISSO?
- **Prova/credibilidade:** Case, dado ou resultado que valida

### 4. PERSONALIZA√á√ÉO RECOMENDADA

**Para usar em EMAIL:**
- Insight #1: [dado/not√≠cia espec√≠fica para mencionar]
- Insight #2: [rela√ß√£o com setor ou concorrentes]
- Gancho de abertura sugerido: "[frase para primeiro par√°grafo]"

**Para usar em WHATSAPP:**
- Mensagem curta sugerida: "[exemplo de abordagem amig√°vel]"
- Call-to-action recomendado: "[pergunta f√°cil de responder]"

### 5. CAMPOS PARA SUBSTITUI√á√ÉO NOS TEMPLATES

Preencher vari√°veis que ser√£o usadas nos templates:
- **{setor}:** [setor espec√≠fico, ex: "e-commerce de moda"]
- **{dor_identificada}:** [dor #1 em 1 frase]
- **{solucao}:** [como resolvemos em 1 frase]
- **{beneficio_principal}:** [principal benef√≠cio em 1 frase]
- **{area_interesse}:** [√°rea espec√≠fica onde podemos ajudar]

### 6. RECOMENDA√á√ÉO DE ABORDAGEM
- **Canal priorit√°rio:** Email ou WhatsApp? (considerar formalidade do setor)
- **Tom recomendado:** Formal/Semi-formal/Informal
- **Timing ideal:** Melhor dia/hora para contato (considerar not√≠cias recentes)
- **Persona-alvo:** Cargo/nome do tomador de decis√£o ideal

## FORMATO DA SA√çDA:
- Markdown estruturado
- Bullet points
- M√°ximo 400 palavras
- Foco em A√á√ÉO (o que fazer com essa informa√ß√£o)
- Destacar os 2-3 insights mais valiosos em **negrito**`,
  informacoesPropria: `Somos uma plataforma SaaS de prospec√ß√£o automatizada que utiliza IA para:
- Gerar listas de leads qualificados do Google Maps
- Pesquisar informa√ß√µes detalhadas sobre cada empresa
- Criar emails personalizados automaticamente
- Economizar 80% do tempo em prospec√ß√£o manual

Nossos clientes conseguem gerar 10x mais leads qualificados em 1/5 do tempo.`,

  // Prompts espec√≠ficos por canal - Email
  emailPromptOverview: `Voc√™ √© um Especialista em Cold Email B2B com 10+ anos de experi√™ncia.

CONTEXTO: Trabalha para {nomeEmpresa} - {informacoesPropria}

SEU PAPEL:
- Analisar empresas prospects profundamente
- Identificar dores e oportunidades reais
- Criar emails hiperpersonalizados que geram respostas

ESTILO DE ESCRITA:
- Tom profissional mas conversacional
- Direto ao ponto, sem floreios
- Foco em valor para o destinat√°rio (WIIFM - What's In It For Me)
- Usar dados e insights da pesquisa para mostrar que voc√™ fez o dever de casa`,
  emailPromptTatica: `ESTRAT√âGIA DE SEQU√äNCIA DE 3 EMAILS:

EMAIL 1 (Primeiro Contato - Dia 0):
- Objetivo: Despertar curiosidade e mostrar relev√¢ncia
- Abordagem: Insight + Oportunidade identificada + Pergunta
- Tamanho: 80-120 palavras
- CTA: Pergunta aberta para iniciar conversa

EMAIL 2 (Bump - 3 dias depois):
- Objetivo: Retomar sem ser inconveniente
- Abordagem: Resposta curta na mesma thread, adicionar valor novo
- Tamanho: 40-60 palavras
- CTA: Oferta de recurso (case, whitepaper) ou agenda

EMAIL 3 (Breakup - 7 dias depois do Email 2):
- Objetivo: √öltima tentativa com gatilho de escassez
- Abordagem: "Entendo que pode n√£o ser o momento, mas..."
- Tamanho: 60-80 palavras
- CTA: Deixar porta aberta ou arquivar contato

REGRAS DE TIMING:
- Sempre respeitar o hor√°rio comercial do prospect
- Evitar segundas de manh√£ e sextas √† tarde
- Ideal: ter√ßas/quartas/quintas entre 10h-15h`,
  emailPromptDiretrizes: `REGRAS R√çGIDAS DE ESCRITA:

ESTRUTURA:
‚úÖ Linha de assunto: m√°ximo 50 caracteres, sem caps lock, sem emojis
‚úÖ Primeiro par√°grafo: 1 frase explicando POR QUE voc√™ est√° entrando em contato
‚úÖ Segundo par√°grafo: Insight ou dado espec√≠fico sobre a empresa deles
‚úÖ Terceiro par√°grafo: Como voc√™ pode ajudar (1 benef√≠cio concreto)
‚úÖ CTA: 1 pergunta simples ou sugest√£o de pr√≥ximo passo

PROIBIDO:
‚ùå Come√ßar com "Espero que este email te encontre bem"
‚ùå Usar jarg√µes tipo "solu√ß√£o inovadora", "disruptivo", "sinergia"
‚ùå Fazer pitches de venda agressivos
‚ùå Falar mais sobre voc√™ do que sobre eles
‚ùå Links m√∫ltiplos ou anexos n√£o solicitados
‚ùå Caps lock, m√∫ltiplos pontos de exclama√ß√£o, emojis

OBRIGAT√ìRIO:
‚úÖ Mencionar algo espec√≠fico da empresa (not√≠cia, conquista, desafio do setor)
‚úÖ Usar dados quando poss√≠vel ("70% das empresas em {setor} enfrentam...")
‚úÖ Personalizar al√©m do {nome_empresa} - mostrar research real
‚úÖ Incluir assinatura com {assinatura}, {nomeEmpresa}, {telefoneContato}, {websiteEmpresa}
‚úÖ Usar vari√°veis: {nome_empresa}, {setor}, {dor_identificada}, {solucao}, {informacoes_propria}

FORMATA√á√ÉO:
- M√°ximo 3 par√°grafos curtos
- Espa√ßamento entre par√°grafos
- Sem negrito ou it√°lico (pode ser filtrado como spam)
- Uma frase por linha quando fizer sentido (facilita leitura)`,

  // Prompts espec√≠ficos por canal - WhatsApp
  whatsappPromptOverview: `Voc√™ √© um Especialista em Vendas Conversacionais via WhatsApp.

CONTEXTO: Trabalha para {nomeEmpresa} - {informacoesPropria}

DIFEREN√áA WHATSAPP vs EMAIL:
- WhatsApp √© INFORMAL e √ÅGIL
- As pessoas esperam respostas r√°pidas e diretas
- Emojis s√£o BEM-VINDOS (mas com modera√ß√£o)
- Mensagens mais curtas = maior taxa de resposta

SEU PAPEL:
- Iniciar conversas naturais e amig√°veis
- Usar tom de "colega de trabalho", n√£o vendedor
- Criar senso de urg√™ncia suave
- Facilitar transi√ß√£o para call ou reuni√£o

PRINC√çPIOS WHATSAPP:
1. Seja humano (use "oi", "tudo bem?", etc)
2. V√° direto ao ponto em 2-3 mensagens
3. Fa√ßa UMA pergunta por vez
4. Use quebras de linha para facilitar leitura
5. Sempre termine com CTA clara`,
  whatsappPromptTatica: `ESTRAT√âGIA DE SEQU√äNCIA DE 3 MENSAGENS WHATSAPP:

MENSAGEM 1 (Primeiro Contato):
- Tom: Descontra√≠do mas profissional
- Objetivo: Apresentar + gerar curiosidade
- Estrutura: Sauda√ß√£o ‚Üí Motivo do contato ‚Üí Pergunta simples
- Tamanho: 150-200 caracteres (2-3 linhas)
- Timing: Entre 10h-17h, evitar hor√°rio de almo√ßo

MENSAGEM 2 (Follow-up - 2-3 dias depois):
- Tom: Amig√°vel, sem press√£o
- Objetivo: Refor√ßar valor + facilitar pr√≥ximo passo
- Estrutura: Bump amig√°vel ‚Üí Valor adicional ‚Üí CTA f√°cil
- Tamanho: 120-180 caracteres
- Pode incluir emoji estrat√©gico (üëã, üí°, üìä)

MENSAGEM 3 (√öltima Tentativa - 3 dias depois):
- Tom: Educado mas firme
- Objetivo: Breakup amig√°vel + deixar porta aberta
- Estrutura: Entendo que est√° ocupado ‚Üí Sem problema ‚Üí Deixo meu contato
- Tamanho: 100-150 caracteres
- Emoji de despedida (üòä, üöÄ)

TIMING INTELIGENTE:
- Respeitar hor√°rio comercial
- Evitar fins de semana
- Ideal: Ter√ßa/Quarta/Quinta 14h-16h`,
  whatsappPromptDiretrizes: `REGRAS DE ESCRITA WHATSAPP:

ESTRUTURA IDEAL:
‚úÖ Primeira linha: Sauda√ß√£o curta + nome da empresa
‚úÖ Segunda linha: Motivo espec√≠fico do contato
‚úÖ Terceira linha (opcional): Benef√≠cio r√°pido
‚úÖ √öltima linha: Pergunta direta ou CTA

PROIBIDO NO WHATSAPP:
‚ùå Mensagens longas (m√°x 200 caracteres por mensagem)
‚ùå Links encurtados (parecem spam)
‚ùå Linguagem muito formal ("Prezado", "Atenciosamente")
‚ùå M√∫ltiplos emojis na mesma mensagem
‚ùå Mai√∫sculas em palavras inteiras
‚ùå Pitch de vendas no primeiro contato

OBRIGAT√ìRIO:
‚úÖ Usar quebras de linha (enviar em "blocos" curtos)
‚úÖ Personaliza√ß√£o real (mencionar algo da empresa)
‚úÖ Tom de "eu pesquisei sobre voc√™s" n√£o "envio em massa"
‚úÖ CTA clara e F√ÅCIL de responder (sim/n√£o, link calendar, etc)
‚úÖ Usar vari√°veis: {nome_empresa}, {setor}, {beneficio_principal}, {solucao}

EMOJIS PERMITIDOS (use 1 por mensagem no m√°ximo):
üëã (sauda√ß√£o) | üí° (ideia) | üìä (dados/resultado) |
üöÄ (crescimento) | ‚úÖ (confirma√ß√£o) | üòä (cordialidade)

FORMATA√á√ÉO:
- Mensagem 1: 2-3 linhas
- Mensagem 2: 2-3 linhas
- Mensagem 3: 2 linhas
- Uma ideia por linha
- Perguntas sempre na √∫ltima linha`,

  // Prompts espec√≠ficos por canal - H√≠brido
  hybridPromptOverview: `Voc√™ √© um Orquestrador de Campanhas Multicanal (Email + WhatsApp).

CONTEXTO: {nomeEmpresa} - {informacoesPropria}

ESTRAT√âGIA H√çBRIDA:
A cad√™ncia h√≠brida combina a profundidade do EMAIL com a agilidade do WHATSAPP, criando m√∫ltiplos pontos de contato coordenados.

PRINC√çPIOS:
1. **Consist√™ncia**: Mensagens devem "conversar" entre si
2. **Complementaridade**: Email = contexto, WhatsApp = urg√™ncia
3. **Coordena√ß√£o**: Respeitar espa√ßamento entre canais
4. **Naturalidade**: N√£o parecer "sequ√™ncia automatizada"

PADR√ÉO RECOMENDADO:
Dia 0: Email 1 (contato formal, estabelece contexto)
Dia 1-2: WhatsApp 1 (follow-up r√°pido e amig√°vel)
Dia 4: Email 2 (bump com valor adicional)
Dia 5-6: WhatsApp 2 (refor√ßo de urg√™ncia)
Dia 8-10: Email 3 (breakup profissional)

OBJETIVO:
Maximizar taxa de resposta atrav√©s de m√∫ltiplos touchpoints sem ser invasivo`,
  hybridPromptTatica: `T√ÅTICA DE SEQU√äNCIA H√çBRIDA (3 Emails + 2 WhatsApp):

FASE 1 - ABERTURA (Dia 0-2):
üìß EMAIL 1 (Dia 0):
- Contato formal e profundo
- Estabelece credibilidade
- Apresenta research detalhado
- 100-120 palavras

üí¨ WHATSAPP 1 (Dia 1-2):
- Follow-up amig√°vel e leve
- "Vi que enviei um email, voc√™ conseguiu ver?"
- Facilita transi√ß√£o para conversa
- 150-180 caracteres

FASE 2 - ENGAJAMENTO (Dia 3-6):
üìß EMAIL 2 (Dia 4):
- Bump na mesma thread
- Adiciona case study ou dado novo
- Mant√©m profissionalismo
- 60-80 palavras

üí¨ WHATSAPP 2 (Dia 5-6):
- Cria urg√™ncia suave
- Oferece call r√°pida
- Tom mais direto
- 120-150 caracteres

FASE 3 - FECHAMENTO (Dia 8-10):
üìß EMAIL 3 (Dia 8-10):
- Breakup educado
- Deixa porta aberta
- Refor√ßa valor
- 80-100 palavras

REGRA DE OURO:
N√£o enviar Email e WhatsApp no mesmo dia (exceto Dia 1-2).
Deixar pelo menos 24h entre mensagens de canais diferentes.`,
  hybridPromptDiretrizes: `DIRETRIZES PARA CONTE√öDO H√çBRIDO:

CONSIST√äNCIA ENTRE CANAIS:
‚úÖ Usar mesma proposta de valor em ambos os canais
‚úÖ Refer√™ncias cruzadas quando fizer sentido ("como mencionei no email...")
‚úÖ Manter mesmo n√≠vel de personaliza√ß√£o
‚úÖ N√£o repetir exatamente o mesmo conte√∫do

SEPARA√á√ÉO DE RESPONSABILIDADES:

üìß EMAIL (Formal, Informativo):
- Explica√ß√µes detalhadas
- Research e insights profundos
- Cases e dados
- Links para recursos
- Formata√ß√£o profissional

üí¨ WHATSAPP (Informal, √Ågil):
- Mensagens curtas e diretas
- Linguagem coloquial
- Emojis estrat√©gicos
- CTAs simples (sim/n√£o, link calendar)
- Tom de "colega de trabalho"

REGRAS ESPEC√çFICAS:

COORDENA√á√ÉO DE TIMING:
‚úÖ Email manh√£ ‚Üí WhatsApp tarde (ou vice-versa)
‚úÖ M√≠nimo 24h entre mensagens de canais diferentes
‚úÖ M√°ximo 2 tentativas por canal
‚úÖ Respeitar hor√°rio comercial de AMBOS os canais

PERSONALIZA√á√ÉO:
‚úÖ Email: 2-3 dados espec√≠ficos da empresa
‚úÖ WhatsApp: 1 insight espec√≠fico √© suficiente
‚úÖ Ambos devem mencionar {nome_empresa} e {setor}

CTA PROGRESSIVO:
1. Email 1: "Faz sentido conversarmos?"
2. WhatsApp 1: "Conseguiu ver o email?"
3. Email 2: "Deixo link para agendar: [calendar]"
4. WhatsApp 2: "15min essa semana?"
5. Email 3: "Entendo que n√£o √© o momento..."

VARI√ÅVEIS COMUNS:
- {nome_empresa}
- {setor}
- {dor_identificada}
- {solucao}
- {beneficio_principal}
- {informacoes_propria}
- {nomeEmpresa}
- {assinatura}
- {telefoneContato}
- {websiteEmpresa}`,

  // Templates de Email
  emailTitulo1: "{nome_empresa} - Oportunidade de otimizar {area_interesse}",
  emailCorpo1: `Ol√°, equipe {nome_empresa}!

Percebi que voc√™s atuam no setor de {setor} e identifiquei uma oportunidade interessante.

{dor_identificada}

{informacoes_propria}

Podemos agendar uma conversa r√°pida de 15 minutos?

Atenciosamente,
[Seu Nome]`,
  emailCorpo2: `Ol√° novamente!

Gostaria de retomar o assunto sobre como podemos ajudar a {nome_empresa} com {solucao}.

Preparei alguns cases de empresas similares no setor de {setor} que conseguiram resultados expressivos.

Teria disponibilidade para uma call esta semana?

Abra√ßos,
[Seu Nome]`,
  emailTitulo3: "√öltima chance: Oportunidade para {nome_empresa}",
  emailCorpo3: `Oi!

Este √© meu √∫ltimo contato sobre a oportunidade que identifiquei para {nome_empresa}.

Se n√£o houver interesse agora, tudo bem! Fico √† disposi√ß√£o caso precisem no futuro.

{informacoes_propria}

Abra√ßos,
[Seu Nome]`,

  // Informa√ß√µes da Empresa
  nomeEmpresa: "",
  assinatura: "",
  telefoneContato: "",
  websiteEmpresa: "",
  senderEmails: "[]",

  // Templates WhatsApp
  whatsappMessage1: `Ol√°! Vi que voc√™ tem um neg√≥cio na √°rea de {setor} e achei que poderia ser interessante trocar uma ideia.

Temos ajudado empresas como a sua a {beneficio_principal}. Podemos conversar?`,
  whatsappMessage2: `Oi novamente! üëã

S√≥ passando aqui pra ver se voc√™ teve chance de pensar na nossa conversa sobre {solucao}.

Preparei algumas ideias que podem funcionar muito bem pra {nome_empresa}. Quando voc√™ tiver uns minutinhos, me avisa!`,
  whatsappMessage3: `√öltima mensagem aqui! üòä

Entendo que pode estar ocupado(a). Se n√£o for o momento certo, sem problemas!

Qualquer coisa, √© s√≥ chamar. Boa sorte com {nome_empresa}! üöÄ`,
  evolutionInstances: "[]",

  // Cad√™ncias (JSON) - NOMES SINCRONIZADOS COM PRISMA
  emailOnlyCadence: '[{"messageNumber":1,"dayOfWeek":1,"timeWindow":"09:00-11:00","daysAfterPrevious":0},{"messageNumber":2,"dayOfWeek":3,"timeWindow":"14:00-16:00","daysAfterPrevious":2},{"messageNumber":3,"dayOfWeek":5,"timeWindow":"09:00-11:00","daysAfterPrevious":2}]',
  whatsappOnlyCadence: '[{"messageNumber":1,"dayOfWeek":1,"timeWindow":"10:00-12:00","daysAfterPrevious":0},{"messageNumber":2,"dayOfWeek":3,"timeWindow":"15:00-17:00","daysAfterPrevious":2},{"messageNumber":3,"dayOfWeek":5,"timeWindow":"10:00-12:00","daysAfterPrevious":2}]',
  hybridCadence: '[{"type":"email","messageNumber":1,"emailNumber":1,"dayOfWeek":1,"timeWindow":"09:00-11:00","daysAfterPrevious":0},{"type":"whatsapp","messageNumber":2,"whatsappNumber":1,"dayOfWeek":2,"timeWindow":"14:00-16:00","daysAfterPrevious":1},{"type":"email","messageNumber":3,"emailNumber":2,"dayOfWeek":4,"timeWindow":"09:00-11:00","daysAfterPrevious":2}]',
  useHybridCadence: false,

  // Configura√ß√µes de Email
  email2DelayDays: 3,
  email3DelayDays: 7,
  dailyEmailLimit: 100,
  emailBusinessHourStart: 9,
  emailBusinessHourEnd: 18,

  // Configura√ß√µes de WhatsApp
  whatsappDailyLimit: 50,
  whatsappBusinessHourStart: 9,
  whatsappBusinessHourEnd: 18,

  // Configura√ß√µes H√≠bridas
  hybridDailyLimit: 70,
  hybridBusinessHourStart: 9,
  hybridBusinessHourEnd: 18,

  // Configura√ß√µes Gerais
  sendOnlyBusinessHours: true,
};

// Fun√ß√£o para sanitizar HTML/scripts e prevenir XSS
// NOTA: Permite vari√°veis de template no formato {variavel}
function sanitizeInput(text: string): string {
  // Temporariamente substitui vari√°veis de template para preserv√°-las
  const templateVars: string[] = [];
  let sanitized = text.replace(/\{[^}]+\}/g, (match) => {
    templateVars.push(match);
    return `__TEMPLATE_VAR_${templateVars.length - 1}__`;
  });

  // Aplica sanitiza√ß√£o
  sanitized = sanitized
    // Remove tags script completas
    .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, "")
    // Remove apenas tags HTML perigosas (preserva formata√ß√£o b√°sica se necess√°rio)
    .replace(/<script[^>]*>.*?<\/script>/gi, "")
    .replace(/<iframe[^>]*>.*?<\/iframe>/gi, "")
    .replace(/<embed[^>]*>/gi, "")
    .replace(/<object[^>]*>.*?<\/object>/gi, "")
    // Remove event handlers inline (onclick, onerror, etc.)
    .replace(/on\w+\s*=\s*["'][^"']*["']/gi, "")
    // Remove javascript: protocol
    .replace(/javascript:/gi, "")
    // Remove data: protocol (pode ser usado para XSS)
    .replace(/data:text\/html/gi, "")
    // Remove null bytes
    .replace(/\0/g, "")
    .trim();

  // Restaura vari√°veis de template
  templateVars.forEach((varName, index) => {
    sanitized = sanitized.replace(`__TEMPLATE_VAR_${index}__`, varName);
  });

  return sanitized;
}

// Valida√ß√£o adicional contra padr√µes XSS comuns
function containsXSS(text: string): boolean {
  // Remove vari√°veis de template temporariamente para valida√ß√£o
  const withoutTemplateVars = text.replace(/\{[^}]+\}/g, '');

  const xssPatterns = [
    /<script/i,
    /javascript:/i,
    /onerror\s*=/i,
    /onclick\s*=/i,
    /onload\s*=/i,
    /onmouseover\s*=/i,
    /<iframe/i,
    /<embed/i,
    /<object/i,
    /eval\s*\(/i,
    /expression\s*\(/i,
    /vbscript:/i,
    /data:text\/html/i,
  ];

  return xssPatterns.some(pattern => pattern.test(withoutTemplateVars));
}

// Esquema de valida√ß√£o com Zod + prote√ß√£o XSS
const settingsSchema = z.object({
  templatePesquisa: z
    .string()
    .max(5000, "Template muito longo")
    .refine((val) => !containsXSS(val), {
      message: "Conte√∫do potencialmente malicioso detectado",
    })
    .transform(sanitizeInput)
    .optional()
    .default(""),
  templateAnaliseEmpresa: z
    .string()
    .max(5000, "Template muito longo")
    .refine((val) => !containsXSS(val), {
      message: "Conte√∫do potencialmente malicioso detectado",
    })
    .transform(sanitizeInput)
    .optional()
    .default(""),
  informacoesPropria: z
    .string()
    .max(5000, "Texto muito longo")
    .refine((val) => !containsXSS(val), {
      message: "Conte√∫do potencialmente malicioso detectado",
    })
    .transform(sanitizeInput)
    .optional()
    .default(""),

  // Prompts espec√≠ficos por canal - Email
  emailPromptOverview: z
    .string()
    .max(5000, "Prompt muito longo")
    .refine((val) => !containsXSS(val), {
      message: "Conte√∫do potencialmente malicioso detectado",
    })
    .transform(sanitizeInput)
    .optional()
    .default(""),
  emailPromptTatica: z
    .string()
    .max(5000, "Prompt muito longo")
    .refine((val) => !containsXSS(val), {
      message: "Conte√∫do potencialmente malicioso detectado",
    })
    .transform(sanitizeInput)
    .optional()
    .default(""),
  emailPromptDiretrizes: z
    .string()
    .max(5000, "Prompt muito longo")
    .refine((val) => !containsXSS(val), {
      message: "Conte√∫do potencialmente malicioso detectado",
    })
    .transform(sanitizeInput)
    .optional()
    .default(""),

  // Prompts espec√≠ficos por canal - WhatsApp
  whatsappPromptOverview: z
    .string()
    .max(5000, "Prompt muito longo")
    .refine((val) => !containsXSS(val), {
      message: "Conte√∫do potencialmente malicioso detectado",
    })
    .transform(sanitizeInput)
    .optional()
    .default(""),
  whatsappPromptTatica: z
    .string()
    .max(5000, "Prompt muito longo")
    .refine((val) => !containsXSS(val), {
      message: "Conte√∫do potencialmente malicioso detectado",
    })
    .transform(sanitizeInput)
    .optional()
    .default(""),
  whatsappPromptDiretrizes: z
    .string()
    .max(5000, "Prompt muito longo")
    .refine((val) => !containsXSS(val), {
      message: "Conte√∫do potencialmente malicioso detectado",
    })
    .transform(sanitizeInput)
    .optional()
    .default(""),

  // Prompts espec√≠ficos por canal - H√≠brido
  hybridPromptOverview: z
    .string()
    .max(5000, "Prompt muito longo")
    .refine((val) => !containsXSS(val), {
      message: "Conte√∫do potencialmente malicioso detectado",
    })
    .transform(sanitizeInput)
    .optional()
    .default(""),
  hybridPromptTatica: z
    .string()
    .max(5000, "Prompt muito longo")
    .refine((val) => !containsXSS(val), {
      message: "Conte√∫do potencialmente malicioso detectado",
    })
    .transform(sanitizeInput)
    .optional()
    .default(""),
  hybridPromptDiretrizes: z
    .string()
    .max(5000, "Prompt muito longo")
    .refine((val) => !containsXSS(val), {
      message: "Conte√∫do potencialmente malicioso detectado",
    })
    .transform(sanitizeInput)
    .optional()
    .default(""),

  // Email Templates
  emailTitulo1: z
    .string()
    .max(200, "T√≠tulo muito longo")
    .refine((val) => !containsXSS(val), {
      message: "Conte√∫do potencialmente malicioso detectado",
    })
    .transform(sanitizeInput)
    .optional()
    .default(""),
  emailCorpo1: z
    .string()
    .max(5000, "Corpo muito longo")
    .refine((val) => !containsXSS(val), {
      message: "Conte√∫do potencialmente malicioso detectado",
    })
    .transform(sanitizeInput)
    .optional()
    .default(""),
  emailCorpo2: z
    .string()
    .max(5000, "Corpo muito longo")
    .refine((val) => !containsXSS(val), {
      message: "Conte√∫do potencialmente malicioso detectado",
    })
    .transform(sanitizeInput)
    .optional()
    .default(""),
  emailTitulo3: z
    .string()
    .max(200, "T√≠tulo muito longo")
    .refine((val) => !containsXSS(val), {
      message: "Conte√∫do potencialmente malicioso detectado",
    })
    .transform(sanitizeInput)
    .optional()
    .default(""),
  emailCorpo3: z
    .string()
    .max(5000, "Corpo muito longo")
    .refine((val) => !containsXSS(val), {
      message: "Conte√∫do potencialmente malicioso detectado",
    })
    .transform(sanitizeInput)
    .optional()
    .default(""),

  // Informa√ß√µes Cr√≠ticas da Empresa
  nomeEmpresa: z
    .string()
    .max(200, "Nome muito longo")
    .refine((val) => !containsXSS(val), {
      message: "Conte√∫do potencialmente malicioso detectado",
    })
    .transform(sanitizeInput)
    .optional()
    .default(""),
  assinatura: z
    .string()
    .max(200, "Assinatura muito longa")
    .refine((val) => !containsXSS(val), {
      message: "Conte√∫do potencialmente malicioso detectado",
    })
    .transform(sanitizeInput)
    .optional()
    .default(""),
  telefoneContato: z
    .string()
    .max(50, "Telefone muito longo")
    .refine((val) => !containsXSS(val), {
      message: "Conte√∫do potencialmente malicioso detectado",
    })
    .transform(sanitizeInput)
    .optional()
    .default(""),
  websiteEmpresa: z
    .string()
    .max(500, "Website muito longo")
    .refine((val) => !containsXSS(val), {
      message: "Conte√∫do potencialmente malicioso detectado",
    })
    .transform(sanitizeInput)
    .optional()
    .default(""),
  senderEmails: z
    .string()
    .refine((val) => !containsXSS(val), {
      message: "Conte√∫do potencialmente malicioso detectado",
    })
    .transform(sanitizeInput)
    .optional()
    .default("[]"),

  // WhatsApp Templates
  whatsappMessage1: z
    .string()
    .max(5000, "Mensagem muito longa")
    .refine((val) => !containsXSS(val), {
      message: "Conte√∫do potencialmente malicioso detectado",
    })
    .transform(sanitizeInput)
    .optional()
    .default(""),
  whatsappMessage2: z
    .string()
    .max(5000, "Mensagem muito longa")
    .refine((val) => !containsXSS(val), {
      message: "Conte√∫do potencialmente malicioso detectado",
    })
    .transform(sanitizeInput)
    .optional()
    .default(""),
  whatsappMessage3: z
    .string()
    .max(5000, "Mensagem muito longa")
    .refine((val) => !containsXSS(val), {
      message: "Conte√∫do potencialmente malicioso detectado",
    })
    .transform(sanitizeInput)
    .optional()
    .default(""),

  // Evolution API Instances
  evolutionInstances: z
    .string()
    .refine((val) => {
      try {
        JSON.parse(val);
        return true;
      } catch {
        return false;
      }
    }, { message: "JSON inv√°lido" })
    .optional()
    .default("[]"),

  // Cad√™ncias (JSON fields) - NOMES SINCRONIZADOS COM PRISMA
  emailOnlyCadence: z
    .string()
    .refine((val) => {
      try {
        JSON.parse(val);
        return true;
      } catch {
        return false;
      }
    }, { message: "JSON inv√°lido" })
    .optional()
    .default('[{"messageNumber":1,"dayOfWeek":1,"timeWindow":"09:00-11:00","daysAfterPrevious":0},{"messageNumber":2,"dayOfWeek":3,"timeWindow":"14:00-16:00","daysAfterPrevious":2},{"messageNumber":3,"dayOfWeek":5,"timeWindow":"09:00-11:00","daysAfterPrevious":2}]'),
  whatsappOnlyCadence: z
    .string()
    .refine((val) => {
      try {
        JSON.parse(val);
        return true;
      } catch {
        return false;
      }
    }, { message: "JSON inv√°lido" })
    .optional()
    .default('[{"messageNumber":1,"dayOfWeek":1,"timeWindow":"10:00-12:00","daysAfterPrevious":0},{"messageNumber":2,"dayOfWeek":3,"timeWindow":"15:00-17:00","daysAfterPrevious":2},{"messageNumber":3,"dayOfWeek":5,"timeWindow":"10:00-12:00","daysAfterPrevious":2}]'),
  hybridCadence: z
    .string()
    .refine((val) => {
      try {
        JSON.parse(val);
        return true;
      } catch {
        return false;
      }
    }, { message: "JSON inv√°lido" })
    .optional()
    .default('[{"type":"email","messageNumber":1,"emailNumber":1,"dayOfWeek":1,"timeWindow":"09:00-11:00","daysAfterPrevious":0},{"type":"whatsapp","messageNumber":2,"whatsappNumber":1,"dayOfWeek":2,"timeWindow":"14:00-16:00","daysAfterPrevious":1},{"type":"email","messageNumber":3,"emailNumber":2,"dayOfWeek":4,"timeWindow":"09:00-11:00","daysAfterPrevious":2}]'),
  useHybridCadence: z.boolean().optional().default(false),

  // Configura√ß√µes de Timing de Emails (deprecated but kept for backward compatibility)
  email2DelayDays: z
    .number()
    .int()
    .min(1, "M√≠nimo 1 dia")
    .max(30, "M√°ximo 30 dias")
    .optional()
    .default(3),
  email3DelayDays: z
    .number()
    .int()
    .min(1, "M√≠nimo 1 dia")
    .max(30, "M√°ximo 30 dias")
    .optional()
    .default(7),
  dailyEmailLimit: z
    .number()
    .int()
    .min(1, "M√≠nimo 1 email")
    .max(1000, "M√°ximo 1000 emails")
    .optional()
    .default(100),

  // WhatsApp-specific timing settings
  whatsappDailyLimit: z
    .number()
    .int()
    .min(1, "M√≠nimo 1 mensagem")
    .max(1000, "M√°ximo 1000 mensagens")
    .optional()
    .default(50),
  sendOnlyBusinessHours: z.boolean().optional().default(true),

  // Per-channel business hours (new fields)
  emailBusinessHourStart: z
    .number()
    .int()
    .min(0, "M√≠nimo 0h")
    .max(23, "M√°ximo 23h")
    .optional()
    .default(9),
  emailBusinessHourEnd: z
    .number()
    .int()
    .min(0, "M√≠nimo 0h")
    .max(23, "M√°ximo 23h")
    .optional()
    .default(18),
  whatsappBusinessHourStart: z
    .number()
    .int()
    .min(0, "M√≠nimo 0h")
    .max(23, "M√°ximo 23h")
    .optional()
    .default(9),
  whatsappBusinessHourEnd: z
    .number()
    .int()
    .min(0, "M√≠nimo 0h")
    .max(23, "M√°ximo 23h")
    .optional()
    .default(18),
  hybridBusinessHourStart: z
    .number()
    .int()
    .min(0, "M√≠nimo 0h")
    .max(23, "M√°ximo 23h")
    .optional()
    .default(9),
  hybridBusinessHourEnd: z
    .number()
    .int()
    .min(0, "M√≠nimo 0h")
    .max(23, "M√°ximo 23h")
    .optional()
    .default(18),
  hybridDailyLimit: z
    .number()
    .int()
    .min(1, "M√≠nimo 1 mensagem")
    .max(1000, "M√°ximo 1000 mensagens")
    .optional()
    .default(70),
});

// GET - Buscar configura√ß√µes do usu√°rio
export async function GET(request: NextRequest) {
  try {
    // Garante que usu√°rio existe
    await ensureDemoUser();

    // Buscar ou criar settings do usu√°rio
    let settings = await prisma.userSettings.findUnique({
      where: { userId: DEMO_USER_ID },
    });

    // Se n√£o existir, cria com valores padr√£o
    if (!settings) {
      settings = await prisma.userSettings.create({
        data: {
          userId: DEMO_USER_ID,
          ...DEFAULT_SETTINGS,
        },
      });
    }

    return NextResponse.json({
      success: true,
      settings,
    });
  } catch (error) {
    console.error("[API /settings GET] Erro ao buscar configura√ß√µes:", {
      error: error instanceof Error ? error.message : error,
      stack: error instanceof Error ? error.stack : undefined,
      timestamp: new Date().toISOString(),
    });
    return NextResponse.json(
      { success: false, error: "Erro ao buscar configura√ß√µes" },
      { status: 500 }
    );
  }
}

// POST - Salvar configura√ß√µes do usu√°rio
export async function POST(request: NextRequest) {
  try {
    // Garante que usu√°rio existe
    await ensureDemoUser();

    const body = await request.json();
    console.log("üì• [API] Received body:", JSON.stringify(body, null, 2));

    // Valida√ß√£o robusta com Zod (inclui sanitiza√ß√£o)
    const validatedBody = settingsSchema.safeParse(body);
    if (!validatedBody.success) {
      console.error("‚ùå [API] Validation failed:", validatedBody.error.flatten());
      return NextResponse.json(
        {
          success: false,
          error: "Dados inv√°lidos",
          details: validatedBody.error.flatten(),
        },
        { status: 400 }
      );
    }

    const dataToSave = validatedBody.data;
    console.log("‚úÖ [API] Validation passed, saving:", JSON.stringify(dataToSave, null, 2));

    // Upsert (criar ou atualizar) settings
    const settings = await prisma.userSettings.upsert({
      where: { userId: DEMO_USER_ID },
      create: { userId: DEMO_USER_ID, ...dataToSave },
      update: dataToSave,
    });

    console.log("‚úÖ [API] Settings saved successfully");

    return NextResponse.json({
      success: true,
      message: "Configura√ß√µes salvas com sucesso",
      settings,
    });
  } catch (error) {
    console.error("[API /settings POST] ‚ùå Erro ao salvar configura√ß√µes:", {
      error: error instanceof Error ? error.message : error,
      stack: error instanceof Error ? error.stack : undefined,
      timestamp: new Date().toISOString(),
    });
    return NextResponse.json(
      {
        success: false,
        error: "Erro ao salvar configura√ß√µes",
        details: error instanceof Error ? error.message : String(error)
      },
      { status: 500 }
    );
  }
}
