generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String?
  credits   Int        @default(150)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  campaigns Campaign[]
  settings  UserSettings?

  @@map("users")
}

model UserSettings {
  id                      String   @id @default(cuid())
  userId                  String   @unique @map("user_id")

  // Templates de Pesquisa e Análise
  templatePesquisa        String   @default("") @map("template_pesquisa") @db.Text
  templateAnaliseEmpresa  String   @default("") @map("template_analise_empresa") @db.Text
  informacoesPropria      String   @default("") @map("informacoes_propria") @db.Text

  // Prompt Customization (Novos campos)
  promptOverview          String   @default("") @map("prompt_overview") @db.Text
  promptTatica            String   @default("") @map("prompt_tatica") @db.Text
  promptDiretrizes        String   @default("") @map("prompt_diretrizes") @db.Text

  // Email Templates
  emailTitulo1            String   @default("") @map("email_titulo_1")
  emailCorpo1             String   @default("") @map("email_corpo_1") @db.Text
  emailCorpo2             String   @default("") @map("email_corpo_2") @db.Text
  emailTitulo3            String   @default("") @map("email_titulo_3")
  emailCorpo3             String   @default("") @map("email_corpo_3") @db.Text

  // Informações da Empresa (CRÍTICO)
  nomeEmpresa             String   @default("") @map("nome_empresa")
  assinatura              String   @default("") @map("assinatura")
  telefoneContato         String   @default("") @map("telefone_contato")
  websiteEmpresa          String   @default("") @map("website_empresa")

  // Emails Remetentes (CRÍTICO - armazenado como JSON array)
  senderEmails            String   @default("[]") @map("sender_emails") @db.Text

  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Campaign {
  id          String         @id @default(cuid())
  userId      String         @map("user_id")
  title       String
  status      CampaignStatus @default(PROCESSING)
  quantidade  Int
  tipo        CampaignType
  termos      String
  locais      String
  planilhaUrl String?        @map("planilha_url")
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  leads       Lead[]

  @@map("campaigns")
}

model Lead {
  id             String     @id @default(cuid())
  campaignId     String     @map("campaign_id")
  nomeEmpresa    String     @map("nome_empresa")
  endereco       String?
  website        String?
  telefone       String?
  categoria      String?
  totalReviews   String?    @map("total_reviews")
  notaMedia      String?    @map("nota_media")
  linkGoogleMaps String?    @map("link_google_maps")
  createdAt      DateTime   @default(now()) @map("created_at")

  // Campos de tracking e status
  apifyLeadId    String?    @unique @map("apify_lead_id")
  extractedAt    DateTime?  @map("extracted_at")
  enrichedAt     DateTime?  @map("enriched_at")
  status         LeadStatus @default(EXTRACTED)

  // Dados enriquecidos (Fluxo 2)
  companyResearch    String? @map("company_research") @db.Text
  strategicAnalysis  String? @map("strategic_analysis") @db.Text
  personalization    String? @db.Text
  analysisLink       String? @map("analysis_link")

  // Email tracking
  assignedSender String?   @map("assigned_sender")
  optOutToken    String?   @unique @map("opt_out_token")
  optedOutAt     DateTime? @map("opted_out_at")
  repliedAt      DateTime? @map("replied_at")

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  emails   Email[]

  @@index([campaignId, status])
  @@map("leads")
}

enum CampaignStatus {
  PROCESSING
  COMPLETED
  FAILED
}

enum CampaignType {
  BASICO
  COMPLETO
}

enum LeadStatus {
  EXTRACTED
  ENRICHED
  EMAIL_1_SENT
  EMAIL_2_SENT
  EMAIL_3_SENT
  REPLIED
  OPTED_OUT
  BOUNCED
}

enum EmailStatus {
  PENDING
  SENT
  OPENED
  REPLIED
  BOUNCED
  FAILED
}

model Email {
  id             String      @id @default(cuid())
  leadId         String      @map("lead_id")
  sequenceNumber Int         @map("sequence_number")
  subject        String
  body           String      @db.Text
  senderAccount  String      @map("sender_account")
  sentAt         DateTime?   @map("sent_at")
  messageId      String?     @unique @map("message_id")
  threadId       String?     @map("thread_id")
  status         EmailStatus @default(PENDING)
  openedAt       DateTime?   @map("opened_at")
  repliedAt      DateTime?   @map("replied_at")
  bouncedAt      DateTime?   @map("bounced_at")
  createdAt      DateTime    @default(now()) @map("created_at")

  lead Lead @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@index([leadId, sequenceNumber])
  @@map("emails")
}
