generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String?
  credits   Int        @default(150)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  campaigns Campaign[]
  settings  UserSettings?

  @@map("users")
}

model UserSettings {
  id                      String   @id @default(cuid())
  userId                  String   @unique @map("user_id")

  // Templates de Pesquisa e Análise
  templatePesquisa        String   @default("") @map("template_pesquisa") @db.Text
  templateAnaliseEmpresa  String   @default("") @map("template_analise_empresa") @db.Text
  informacoesPropria      String   @default("") @map("informacoes_propria") @db.Text

  // Prompt Customization (Novos campos)
  promptOverview          String   @default("") @map("prompt_overview") @db.Text
  promptTatica            String   @default("") @map("prompt_tatica") @db.Text
  promptDiretrizes        String   @default("") @map("prompt_diretrizes") @db.Text

  // Email Templates
  emailTitulo1            String   @default("") @map("email_titulo_1")
  emailCorpo1             String   @default("") @map("email_corpo_1") @db.Text
  emailCorpo2             String   @default("") @map("email_corpo_2") @db.Text
  emailTitulo3            String   @default("") @map("email_titulo_3")
  emailCorpo3             String   @default("") @map("email_corpo_3") @db.Text

  // Informações da Empresa (CRÍTICO)
  nomeEmpresa             String   @default("") @map("nome_empresa")
  assinatura              String   @default("") @map("assinatura")
  telefoneContato         String   @default("") @map("telefone_contato")
  websiteEmpresa          String   @default("") @map("website_empresa")

  // Emails Remetentes (CRÍTICO - armazenado como JSON array)
  senderEmails            String   @default("[]") @map("sender_emails") @db.Text

  // WhatsApp Templates
  whatsappMessage1        String   @default("") @map("whatsapp_message_1") @db.Text
  whatsappMessage2        String   @default("") @map("whatsapp_message_2") @db.Text
  whatsappMessage3        String   @default("") @map("whatsapp_message_3") @db.Text

  // === CADÊNCIAS - Armazenado como JSON ===
  // Formato: Array de { type: 'email'|'whatsapp', messageNumber: 1|2|3, dayOfWeek: 0-6, timeWindow: '09:00-11:00' }
  // dayOfWeek: 0=Dom, 1=Seg, 2=Ter, 3=Qua, 4=Qui, 5=Sex, 6=Sáb

  emailOnlyCadence        String   @default("[{\"type\":\"email\",\"messageNumber\":1,\"dayOfWeek\":1,\"timeWindow\":\"09:00-11:00\"},{\"type\":\"email\",\"messageNumber\":2,\"dayOfWeek\":3,\"timeWindow\":\"09:00-11:00\"},{\"type\":\"email\",\"messageNumber\":3,\"dayOfWeek\":5,\"timeWindow\":\"09:00-11:00\"}]") @map("email_only_cadence") @db.Text

  whatsappOnlyCadence     String   @default("[{\"type\":\"whatsapp\",\"messageNumber\":1,\"dayOfWeek\":1,\"timeWindow\":\"10:00-12:00\"},{\"type\":\"whatsapp\",\"messageNumber\":2,\"dayOfWeek\":3,\"timeWindow\":\"10:00-12:00\"},{\"type\":\"whatsapp\",\"messageNumber\":3,\"dayOfWeek\":5,\"timeWindow\":\"10:00-12:00\"}]") @map("whatsapp_only_cadence") @db.Text

  hybridCadence           String   @default("[{\"type\":\"email\",\"messageNumber\":1,\"dayOfWeek\":1,\"timeWindow\":\"09:00-11:00\"},{\"type\":\"whatsapp\",\"messageNumber\":1,\"dayOfWeek\":2,\"timeWindow\":\"10:00-12:00\"},{\"type\":\"email\",\"messageNumber\":2,\"dayOfWeek\":3,\"timeWindow\":\"09:00-11:00\"},{\"type\":\"whatsapp\",\"messageNumber\":2,\"dayOfWeek\":4,\"timeWindow\":\"10:00-12:00\"},{\"type\":\"email\",\"messageNumber\":3,\"dayOfWeek\":5,\"timeWindow\":\"09:00-11:00\"}]") @map("hybrid_cadence") @db.Text

  // Configurações Globais
  sendDelayMinMs          Int      @default(100) @map("send_delay_min_ms")
  sendDelayMaxMs          Int      @default(500) @map("send_delay_max_ms")
  dailyEmailLimit         Int      @default(100) @map("daily_email_limit")
  sendOnlyBusinessHours   Boolean  @default(true) @map("send_only_business_hours")
  businessHourStart       Int      @default(9) @map("business_hour_start")
  businessHourEnd         Int      @default(18) @map("business_hour_end")

  useHybridCadence        Boolean  @default(false) @map("use_hybrid_cadence")

  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Campaign {
  id          String         @id @default(cuid())
  userId      String         @map("user_id")
  title       String
  status      CampaignStatus @default(PROCESSING)
  quantidade  Int
  tipo        CampaignType
  termos      String
  locais      String
  planilhaUrl String?        @map("planilha_url")
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  leads       Lead[]

  @@map("campaigns")
}

model Lead {
  id             String     @id @default(cuid())
  campaignId     String     @map("campaign_id")
  nomeEmpresa    String     @map("nome_empresa")
  email          String?    // Email do lead para envio
  endereco       String?
  website        String?
  telefone       String?
  categoria      String?
  totalReviews   String?    @map("total_reviews")
  notaMedia      String?    @map("nota_media")
  linkGoogleMaps String?    @map("link_google_maps")

  // Redes sociais (extraídas pelo actor lukaskrivka/google-maps-with-contact-details)
  linkedinUrl    String?    @map("linkedin_url")
  twitterUrl     String?    @map("twitter_url")
  instagramUrl   String?    @map("instagram_url")
  facebookUrl    String?    @map("facebook_url")
  youtubeUrl     String?    @map("youtube_url")
  tiktokUrl      String?    @map("tiktok_url")
  pinterestUrl   String?    @map("pinterest_url")

  createdAt      DateTime   @default(now()) @map("created_at")

  // Campos de tracking e status
  apifyLeadId    String?    @unique @map("apify_lead_id")
  extractedAt    DateTime?  @map("extracted_at")
  enrichedAt     DateTime?  @map("enriched_at")
  status         LeadStatus @default(EXTRACTED)
  cadenceType    CadenceType? @map("cadence_type") // Qual tipo de cadência foi aplicada

  // Dados enriquecidos (Fluxo 2)
  companyResearch    String? @map("company_research") @db.Text
  strategicAnalysis  String? @map("strategic_analysis") @db.Text
  personalization    String? @db.Text
  analysisLink       String? @map("analysis_link")

  // Email tracking
  assignedSender String?   @map("assigned_sender")
  optOutToken    String?   @unique @map("opt_out_token")
  optedOutAt     DateTime? @map("opted_out_at")
  repliedAt      DateTime? @map("replied_at")

  campaign        Campaign          @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  emails          Email[]
  whatsappMessages WhatsAppMessage[]

  @@index([campaignId, status])
  @@map("leads")
}

enum CampaignStatus {
  PROCESSING
  COMPLETED
  FAILED
}

enum CampaignType {
  BASICO
  COMPLETO
}

enum LeadStatus {
  EXTRACTED
  ENRICHED
  EMAIL_1_SENT
  EMAIL_2_SENT
  EMAIL_3_SENT
  REPLIED
  OPTED_OUT
  BOUNCED
}

enum EmailStatus {
  PENDING
  SENT
  OPENED
  REPLIED
  BOUNCED
  FAILED
}

model Email {
  id             String      @id @default(cuid())
  leadId         String      @map("lead_id")
  sequenceNumber Int         @map("sequence_number")
  subject        String
  body           String      @db.Text
  senderAccount  String      @map("sender_account")
  sentAt         DateTime?   @map("sent_at")
  messageId      String?     @unique @map("message_id")
  threadId       String?     @map("thread_id")
  status         EmailStatus @default(PENDING)
  openedAt       DateTime?   @map("opened_at")
  repliedAt      DateTime?   @map("replied_at")
  bouncedAt      DateTime?   @map("bounced_at")
  createdAt      DateTime    @default(now()) @map("created_at")

  lead Lead @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@index([leadId, sequenceNumber])
  @@map("emails")
}

model WhatsAppMessage {
  id             String         @id @default(cuid())
  leadId         String         @map("lead_id")
  sequenceNumber Int            @map("sequence_number") // 1, 2 ou 3
  phoneNumber    String         @map("phone_number")
  message        String         @db.Text
  status         WhatsAppStatus @default(PENDING)

  // Tracking
  sentAt      DateTime? @map("sent_at")
  deliveredAt DateTime? @map("delivered_at")
  readAt      DateTime? @map("read_at")
  repliedAt   DateTime? @map("replied_at")

  // Evolution API
  messageId    String?   @unique @map("message_id")
  errorMessage String?   @map("error_message")
  createdAt    DateTime  @default(now()) @map("created_at")

  lead Lead @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@index([leadId, sequenceNumber])
  @@map("whatsapp_messages")
}

enum WhatsAppStatus {
  PENDING
  SENT
  DELIVERED
  READ
  REPLIED
  FAILED
}

enum CadenceType {
  EMAIL_ONLY
  WHATSAPP_ONLY
  HYBRID
}
